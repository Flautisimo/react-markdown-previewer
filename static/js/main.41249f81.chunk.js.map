{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","markdown","markdownInput","handleChange","bind","event","this","setState","target","value","className","id","onChange","type","dangerouslySetInnerHTML","__html","marked","rel","href","React","Component","setOptions","breaks","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,SAAUC,GAEZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBALH,E,gDAQnB,SAAaC,GACXC,KAAKC,SAAS,CACZN,SAAUI,EAAMG,OAAOC,U,oBAI3B,WACE,OACE,sBAAKC,UAAU,YAAf,UACE,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,4BACA,0BACEC,GAAG,SACHF,MAAOH,KAAKN,MAAMC,SAClBW,SAAUN,KAAKH,aACfU,KAAK,OACLH,UAAU,sBAGd,sBAAKA,UAAU,YAAf,UACE,oBAAIA,UAAU,QAAd,qBACA,qBACEC,GAAG,UACHG,wBAAyB,CAAEC,OAAQC,IAAOV,KAAKN,MAAMC,gBAGzD,sBAAKS,UAAU,SAAf,UACG,IADH,UAEU,IACR,mBAAGO,IAAI,aAAaC,KAAK,gCAAgCV,OAAO,SAAhE,kC,GAtCQW,IAAMC,WA+CpBlB,EAAa,iwCA6CjBc,IAAOK,WAAW,CAChBC,QAAQ,IAGKxB,QCxFAyB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.41249f81.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport marked from 'marked';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      markdown: markdownInput\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({\n      markdown: event.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"col-xs-12\">\n          <h1 className=\"title\">Markdown Input</h1>\n          <textarea\n            id=\"editor\"\n            value={this.state.markdown}\n            onChange={this.handleChange}\n            type=\"text\"\n            className=\"markdown-input\"\n          ></textarea>\n        </div>\n        <div className=\"col-xs-12\">\n          <h1 className=\"title\">Preview</h1>\n          <div\n            id=\"preview\"\n            dangerouslySetInnerHTML={{ __html: marked(this.state.markdown) }}\n          ></div>\n        </div>\n        <div className=\"author\">\n          {\" \"}\n          Made by{\" \"}\n          <a rel=\"noreferrer\" href=\"https://github.com/Flautisimo\" target=\"_blank\">\n            Flautisimo\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nvar markdownInput = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHere's some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is a multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... yay!\nOr _italic_.\nOr even... **_both!_**\nAnd if you don't like it... just ~~cross it out~~.\n\nThere's also [links](https://github.com/Flautisimo), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------|--------------|---------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n1. And there are numbererd lists too.\n1. Even if you use just 1s...\n1. The list goes on...\n- Or if you just use dashes or asterisks.\n* And last but not least, let's not forget embedded images: \n![React Logo](https://upload.wikimedia.org/wikipedia/commons/thumb/a/a7/React-icon.svg/320px-React-icon.svg.png)\n### Yes, React is great!`;\n\nmarked.setOptions({\n  breaks: true\n});\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}